/// <reference lib="webworker" />
import { clientsClaim } from 'workbox-core'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies'
import { ExpirationPlugin } from 'workbox-expiration'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'

declare const self: ServiceWorkerGlobalScope

// Use clientsClaim to take control immediately
clientsClaim()

// Precache all assets generated by the build process
const manifest = self.__WB_MANIFEST
precacheAndRoute(manifest)

// Cache the index.html page and return it for all navigation requests
const indexHandler = createHandlerBoundToURL('/index.html')
registerRoute(
  ({ request }) => request.mode === 'navigate',
  indexHandler
)

// Cache CSS, JS, and Web Worker files with a Stale While Revalidate strategy
registerRoute(
  ({ request }) => 
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'assets-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
      }),
    ],
  })
)

// Cache images with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
      }),
    ],
  })
)

// Cache font files with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'font',
  new CacheFirst({
    cacheName: 'fonts-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
      }),
    ],
  })
)

// Handle offline fallback
const offlineFallbackPage = '/offline.html'

// Cache the offline page on install
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('offline-cache').then((cache) => {
      return cache.add(offlineFallbackPage)
    })
  )
})

// Serve the offline page when offline and the requested page is not in cache
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match(offlineFallbackPage)
      })
    )
  }
})

// Listen for messages from the client
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-history') {
    event.waitUntil(syncHistory())
  }
})

// Function to sync history data when coming back online
async function syncHistory() {
  try {
    // This would typically sync with a server
    // For this app, we're just ensuring local storage is consistent
    const historyData = localStorage.getItem('numberHistory')
    if (historyData) {
      // In a real app, you might send this data to a server
      console.log('History data synced successfully')
    }
    return Promise.resolve()
  } catch (error) {
    console.error('Error syncing history:', error)
    return Promise.reject(error)
  }
}

// Periodic sync to keep data fresh (if supported)
self.addEventListener('periodicsync', (event) => {
  if (event.tag === 'refresh-data') {
    event.waitUntil(refreshData())
  }
})

// Function to refresh data periodically
async function refreshData() {
  try {
    // In a real app with a backend, you might fetch fresh data here
    console.log('Data refreshed successfully')
    return Promise.resolve()
  } catch (error) {
    console.error('Error refreshing data:', error)
    return Promise.reject(error)
  }
}
